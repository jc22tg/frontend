# ================================================================
# SCRIPT DE SINCRONIZACI√ìN COMMON-DEFINITIONS
# ================================================================
# Copia autom√°ticamente las definiciones del backend al frontend

param(
    [switch]$Verbose = $false
)

$source = "..\backend\src\shared\common-definitions"
$target = ".\src\generated\common-definitions"

# Lista de archivos a excluir (archivos problem√°ticos)
$excludeFiles = @(
    "transformer-frontend-example.ts",
    "transformer-frontend-example.js",
    "transformer-frontend-example.d.ts",
    "transformer-frontend-example.js.map"
)

if ($Verbose) {
    Write-Host "=== SYNC COMMON-DEFINITIONS ===" -ForegroundColor Cyan
    Write-Host "Source: $source" -ForegroundColor Yellow
    Write-Host "Target: $target" -ForegroundColor Yellow
    Write-Host "Excluding: $($excludeFiles -join ', ')" -ForegroundColor Yellow
}

# Verificar que existe el directorio source
if (-not (Test-Path $source)) {
    Write-Host "‚ùå ERROR: No se encuentra el directorio source: $source" -ForegroundColor Red
    exit 1
}

Write-Host "üîÑ Sincronizando common-definitions..." -ForegroundColor Green

# Limpiar directorio anterior
if (Test-Path $target) {
    Remove-Item $target -Recurse -Force
    if ($Verbose) { Write-Host "   Directorio anterior limpiado" -ForegroundColor Gray }
}

# Crear directorio destino
New-Item -ItemType Directory -Path $target -Force | Out-Null
if ($Verbose) { Write-Host "   Directorio destino creado: $target" -ForegroundColor Gray }

# Copiar archivos (excluyendo node_modules y archivos problem√°ticos)
$excludeFilesArgs = $excludeFiles | ForEach-Object { "/XF"; $_ }
$robocopyArgs = @($source, $target, "/E", "/XD", "node_modules") + $excludeFilesArgs + @("/NFL", "/NDL", "/NJH", "/NJS")
& robocopy @robocopyArgs | Out-Null

# Robocopy return codes: 0-7 are success, >7 are errors
if ($LASTEXITCODE -gt 7) {
    Write-Host "‚ùå ERROR en robocopy: $LASTEXITCODE" -ForegroundColor Red
    exit 1
}

if ($Verbose) { Write-Host "   Archivos copiados exitosamente (excluyendo archivos problem√°ticos)" -ForegroundColor Gray }

# Generar index.ts principal
$indexContent = @"
// Auto-generated from backend/src/shared/common-definitions
// DO NOT MODIFY - This file is automatically generated
// Last updated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')

export * from './entities';
export * from './enums';
export * from './dtos';
export * from './interfaces';
export * from './types';
"@

$indexContent | Out-File -FilePath "$target\index.ts" -Encoding UTF8

if ($Verbose) { Write-Host "   Archivo index.ts generado" -ForegroundColor Gray }

# Verificar archivos copiados
$copiedFiles = Get-ChildItem $target -Recurse -File | Measure-Object
Write-Host "‚úÖ Sincronizaci√≥n completada: $($copiedFiles.Count) archivos" -ForegroundColor Green

# Ejecutar correcciones post-sync autom√°ticamente
Write-Host "Aplicando correcciones post-sync..." -ForegroundColor Yellow
if (Test-Path ".\simple-post-fix.ps1") {
    & .\simple-post-fix.ps1
} else {
    Write-Host "post-sync-fix.ps1 no encontrado" -ForegroundColor Yellow
}

Write-Host "Sincronizacion y correcciones completadas"
